## This chart relies on the common library chart from bjw-s-labs
## You can find it at https://github.com/bjw-s-labs/helm-charts/tree/main/charts/library/common
## Refer there for more detail about the supported values

# These entries are shared between all the Immich components

env:
  REDIS_HOSTNAME: '{{ printf "%s-redis-master" .Release.Name }}'
  DB_HOSTNAME: "{{ .Release.Name }}-postgresql"
  DB_USERNAME: "{{ .Values.postgresql.global.postgresql.auth.username }}"
  DB_DATABASE_NAME: "{{ .Values.postgresql.global.postgresql.auth.database }}"
  # -- You should provide your own secret outside of this helm-chart and use `postgresql.global.postgresql.auth.existingSecret` to provide credentials to the postgresql instance
  DB_PASSWORD: "{{ .Values.postgresql.global.postgresql.auth.password }}"
  IMMICH_MACHINE_LEARNING_URL: '{{ printf "http://%s-machine-learning:3003" .Release.Name }}'

image:
  repository: ghcr.io/immich-app/immich-server
  tag: v1.135.0

immich:
  metrics:
    # Enabling this will create the service monitors needed to monitor immich with the prometheus operator
    enabled: false
  persistence:
    # Main data store for all photos shared between different components.
    library:
      existingClaim: immich-library
      enabled: false
      create: true # create a PVC called immich-library from this chart
      accessMode: ReadWriteMany
      size: 1Ti
      storageClass: # provide your storage class
    external:
      existingClaim: immich-external
      enabled: false
      create: true # create a PVC called immich-external from this chart
      accessMode: ReadWriteMany
      size: 1Ti
      storageClass: # provide your storage class
  # configuration is immich-config.json converted to yaml
  # ref: https://immich.app/docs/install/config-file/
  #
  configuration:
    {}
    # trash:
    #   enabled: false
    #   days: 30
    # storageTemplate:
    #   enabled: true
    #   template: "{{y}}/{{y}}-{{MM}}-{{dd}}/{{filename}}"

# Dependencies

postgresql:
  enabled: true
  image:
    repository: tensorchord/pgvecto-rs
    tag: pg14-v0.3.0
  global:
    postgresql:
      auth:
        username: immich
        database: immich
        password: immich
    security:
      allowInsecureImages: true
  primary:
    customLivenessProbe:
      tcpSocket:
        port: tcp-postgresql
    customReadinessProbe:
      tcpSocket:
        port: tcp-postgresql
    customStartupProbe:
      tcpSocket:
        port: tcp-postgresql
    persistence:
      enabled: false
      accessMode: ReadWriteOnce
      size: 100Gi
      storageClass: # provide your storage class
    startupProbe:
      enabled: true
      # Give DB time to revive itself from interruption ; Default is 15
      failureThreshold: 256
    initdb:
      scripts:
        create-extensions.sql: |
          CREATE EXTENSION cube;
          CREATE EXTENSION earthdistance;
          CREATE EXTENSION vectors;
    containerSecurityContext:
      readOnlyRootFilesystem: false
    extendedConfiguration: |
      logging_collector = off

redis:
  enabled: true
  architecture: standalone
  master:
    persistence:
      enabled: false
  auth:
    enabled: false

# Immich components

server:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-server
    pullPolicy: IfNotPresent
  ingress:
    main:
      enabled: false
      annotations:
        # proxy-body-size is set to 0 to remove the body limit on file uploads
        nginx.ingress.kubernetes.io/proxy-body-size: "0"
      hosts:
        - host: immich.local
          paths:
            - path: "/"
      tls: []

machine-learning:
  enabled: true
  image:
    repository: ghcr.io/immich-app/immich-machine-learning
    pullPolicy: IfNotPresent
  env:
    TRANSFORMERS_CACHE: /cache
  persistence:
    cache:
      enabled: true
      size: 10Gi
      # Optional: Set this to pvc to avoid downloading the ML models every start.
      type: emptyDir
      accessMode: ReadWriteMany
      storageClass: # provide your storage class
