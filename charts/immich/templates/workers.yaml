
{{- define "immich.workers.hardcodedValues" -}}
global:
  nameOverride: workers

env:
  {{ if .Values.immich.metrics.enabled }}
      IMMICH_METRICS: true
  {{ end }}
  {{- if .Values.immich.configuration }}
      IMMICH_CONFIG_FILE: /config/immich-config.yaml
  {{- end }}

{{- $worker_env := deepCopy .Values.immich.env }}
{{ if .Values.immich.metrics.enabled }}
{{- $_ := merge $worker_env (dict "IMMICH_METRICS" "true") }}
{{- end }}
{{ if .Values.immich.configuration }}
{{- $_ := merge $worker_env (dict "IMMICH_CONFIG_FILE" "/config/immich-config.yaml") }}
{{- end }}
{{- $apiEnv := merge (deepCopy $worker_env) (dict "IMMICH_WORKERS_INCLUDE" "api")}}
{{- $microservicesEnv := merge (deepCopy $worker_env) (dict "IMMICH_WORKERS_EXCLUDE" "api")}}

{{- if .Values.immich.configuration }}
defaultPodOptions:
  annotations:
    checksum/config: {{ .Values.immich.configuration | toYaml | sha256sum }}
{{- end }}

controllers:
  api:
    enabled: true
    containers:
      main:
        enabled: true
        image:
          repository: ghcr.io/immich-app/immich-server
          pullPolicy: IfNotPresent
          tag: {{ .Values.immich.image.tag }}
        env: {{ $apiEnv | toYaml | nindent 10 }}
  microservices:
    enabled: true
    containers:
      main:
        enabled: true
        image:
          repository: ghcr.io/immich-app/immich-server
          pullPolicy: IfNotPresent
          tag: {{ .Values.immich.image.tag }}
        env: {{ $microservicesEnv | toYaml | nindent 10 }}
service:
  api:
    enabled: true
    primary: true
    controller: api
    nameOverride: api
    type: ClusterIP
    ports:
      http:
        enabled: true
        primary: true
        port: 2283
        protocol: HTTP
      metrics-api:
        enabled: {{ .Values.immich.metrics.enabled }}
        port: 8081
        protocol: HTTP
{{- if .Values.immich.metrics.enabled }}
  microservices:
    enabled: true
    primary: true
    controller: microservices
    nameOverride: microservices
    type: ClusterIP
    ports:
      metrics-ms:
        enabled: {{ .Values.immich.metrics.enabled }}
        port: 8082
        protocol: HTTP
{{ end }}

serviceMonitor:
  api:
    enabled: {{ .Values.immich.metrics.enabled }}
    serviceName: immich-workers-api
    endpoints:
      - port: metrics-api
        scheme: http
  microservices:
    enabled: {{ .Values.immich.metrics.enabled }}
    serviceName: immich-workers-microservices
    endpoints:
      - port: metrics-ms
        scheme: http

probes:
  liveness: &probes
    enabled: true
    custom: true
    spec:
      httpGet:
        path: /api/server/ping
        port: http
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 3
  readiness: *probes
  startup:
    enabled: true
    custom: true
    spec:
      httpGet:
        path: /api/server/ping
        port: http
      initialDelaySeconds: 0
      periodSeconds: 10
      timeoutSeconds: 1
      failureThreshold: 30

persistence:
{{- if .Values.immich.configuration }}
  config:
    enabled: true
    type: configMap
    name: {{ .Release.Name }}-immich-config
{{- end }}
  library:
    enabled: true
    type: persistentVolumeClaim
    accessMode: ReadWriteMany
    existingClaim: {{ .Values.immich.persistence.library.existingClaim }}
    retain: true
    globalMounts: 
      - path: /usr/src/app/upload
        readOnly: false
# end of define
{{- end }}

{{- if .Values.workers.enabled }}
{{- $ctx := deepCopy (omit . "Values") }}
{{- $_ := set $ctx "Values" dict }}
{{- /* This part is needed so that bjw-s can reflectively resolve values like .Values.postgresql.global.postgresql.auth.username in the envVars */ -}}
{{- $_ := set $ctx.Values "postgresql" (deepCopy .Values.postgresql) }}
{{- $_ := merge $ctx.Values (deepCopy .Values.common) (include "immich.workers.hardcodedValues" . | fromYaml) (deepCopy .Values.workers) -}}

{{- include "bjw-s.common.loader.all" $ctx }}
{{- end }}